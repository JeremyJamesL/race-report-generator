{"mappings":"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","sources":["index.js"],"sourcesContent":["// Global vars\nconst form = document.querySelector('form');\nconst outputArea = document.querySelector('.output');\nconst loading = document.querySelector('.loading');\nconst activityInput = document.querySelector('.enter-activity');\nconst results = document.querySelector('.results');\nconst unitSelector = document.querySelector('.unit-selector');\nconst unitRadios = document.querySelectorAll('.radio-units');\nconst addGoalBtn = document.querySelector('.goal-add'); \nconst goalCard = document.querySelector('.card--goals');\nconst inputsArea = document.querySelector('.inputs');\nconst raceInfoArea = document.querySelector('.card--race-info');\nconst splitsArea = document.querySelector('.card--splits');\nconst goalsArea = document.querySelector('.card--goals');\nconst backgroundArea = document.querySelector('.card--background');\nconst previewArea = document.querySelector('.preview');\nconst sourceArea = document.querySelector('.race-source-text');\n\nlet measurement = 'km';\nlet metricOrStandard;\nlet clientId = '96784';\nlet clientSecret = 'fac7d050a2167b73f126050654539331d0ce413c';\nlet callActivity = 'https://www.strava.com/api/v3/activities/id?access_token=';\n\nlet activities;\nlet globalRace;\n\n\n// Event listeners \nform.addEventListener('submit', handleSubmit);\nraceInfoArea.addEventListener('input', setPreview);\nsplitsArea.addEventListener('keyup', setSplitsPreview);\ngoalsArea.addEventListener('keyup', setGoalsPreview);\ngoalsArea.addEventListener('change', setGoalsPreview);\ngoalsArea.addEventListener('click', setGoalsPreview);\naddGoalBtn.addEventListener('click', handleGoalAdd);\n\nconst config = { attributes: true, childList: true, subtree: true };\n\n// Callback function to execute when mutations are observed\nconst callback = () => {\n    const values = {\n        name: document.querySelector('.preview__name').textContent,\n        date: document.querySelector('.preview__date').textContent,\n        distance: document.querySelector('.preview__distance').textContent,\n        location: document.querySelector('.preview__location').textContent,\n        time: document.querySelector('.preview__time').textContent,\n        elevation: document.querySelector('.preview__elevation').textContent,\n        splits: Array.from(document.querySelectorAll('.race-splits')),\n        goals: Array.from(document.querySelectorAll('.preview__goal'))\n    }\n\n    const splits = values.splits.map(function(split,index) {\n        return `| ${index + 1} | ${split.value} |\\n`\n    })\n\n    const goals = values.goals.map(function(goal,index) {\n        return `| ${goal.children[0].childNodes[0].data} | ${goal.children[1].childNodes[0].data} | ${goal.children[2].childNodes[0].data} \\n`\n    })\n\n    const html = `# Race report \\n## Info\\n### Name: ${values.name}\\n### Date: ${values.date}\\n### Distance: ${values.distance}\\n### Location: ${values.location}\\n### Time: ${values.time}\\n### Elevation: ${values.elevation}\\n### Splits\\n| Split | Time |\\n|------|------|\\n${splits.join('')}\\n### Goals\\n| Goal | Description | Completed? |\\n|------|------|------|\\n${goals.join('')}`\n    sourceArea.textContent = html;\n\n};\nconst observer = new MutationObserver(callback);\nobserver.observe(previewArea, config);\n \nwindow.addEventListener('load', () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const code = urlParams.get('code');\n   \n    if(code != null) {\n        const runID = localStorage.getItem('actID');\n        activityInput.value = runID;\n        displayLoading();\n        fetch(`https://www.strava.com/oauth/token?client_id=${clientId}&client_secret=${clientSecret}&code=${code}&grant_type=authorization_code`, {\n            method: 'POST'\n        })\n        .then(response => response.json())\n        .then(result => displayData(result.access_token, runID));\n    }\n});\n\nunitRadios.forEach(unit => {\n    unit.addEventListener('change', updateSplits)\n})\n\nfunction displayData(accessToken, ID) {\n        fetch(`https://www.strava.com/api/v3/activities/${ID}?access_token=${accessToken}`)\n    .then(response => response.json())\n    .then(result => {\n        hideLoading();\n        setActivities(result);\n        setPreview();\n    })\n}\n\n\n// Add goals\n\nfunction handleGoalAdd() {\n\n    const html = ` \n    <div class=\"input-group mb-3 goal\">\n        <div class=\"input-group-text\">\n        <input class=\"form-check-input mt-0\" type=\"checkbox\" value=\"\" aria-label=\"Checkbox for following text input\">\n        </div>\n        <input type=\"text\" class=\"form-control\" aria-label=\"Text input with checkbox\">\n        <button type=\"button\" class=\"btn-close goal-delete fs-6\" aria-label=\"Close\" role=\"button\"></button>\n  </div>\n  `\n\n  document.querySelector('.card--goals').insertAdjacentHTML('beforeend', html);\n}\n\n\n// Loading \n\nfunction displayLoading() {\n    loading.classList.remove('d-none');\n    loading.classList.add('d-block');\n}\n\nfunction hideLoading() {\n    loading.classList.remove('d-block');\n    loading.classList.add('d-none');\n}\n\n// Display activities\nfunction setActivities(race) {\n\n    // Set global race (this poor logic will be fixed)\n    globalRace = race;\n\n    if(race.laps.length > race.splits_standard.length) {\n        metricOrStandard = 'km';\n    } else {\n        metricOrStandard = 'miles'\n    }\n\n    setSplitsMetric(metricOrStandard);\n\n    function setSplitsMetric() {\n        document.querySelector(`.radio-${metricOrStandard}`).checked = true;\n    }\n    \n    // Get data\n    let raceName = race.name;\n    let totalTime = new Date(race.elapsed_time * 1000).toISOString().slice(11,19);\n    let splits = race.laps;\n\n    results.classList.remove('d-none');\n    results.classList.add('d-flex');\n\n    const convertToMin = (s) => {\n       // 👇️ get number of full minutes\n       const minutes = Math.floor(s / 60);\n        \n       // 👇️ get remainder of seconds\n       const seconds = s % 60;\n       \n       function padTo2Digits(num) {\n         return num.toString().padStart(2, '0');\n       }\n       \n       // ✅ format as MM:SS\n       const result = `${padTo2Digits(minutes)}:${padTo2Digits(seconds)}`;\n       return result;\n    }\n\n    function convertTime(time) {\n        const timestamp = new Date(time);\n        const month = timestamp.toLocaleString('default', {month: 'long'});\n        const day = timestamp.toLocaleString('default', {weekday: 'long'});\n        const date = timestamp.getDate();\n        const year = timestamp.getUTCFullYear();\n        return `${day} ${month} ${date}, ${year}`;\n    }\n\n    function displaySplits(lap) {\n\n        document.querySelector('.the-splits').insertAdjacentHTML('beforeEnd',\n            `\n            <div class=\"mb-3\">\n                <label for=\"race-${lap.name}-control\" class=\"form-label\">\n                    Split ${lap.name}\n                </label>\n                <input type=\"text\" class=\"form-control race-splits\" id=\"race-distance-control-${lap.split}\" value=${convertToMin(lap.elapsed_time)}>\n            </div>\n            `\n        )\n    }\n\n    function displayMetric(metric, item) {\n        if(metric !== undefined){\n            document.querySelector(`#race-${item}-control`).value = metric;\n        }\n    }\n\n    displayMetric(raceName, 'name');\n    displayMetric(totalTime, 'time');\n    displayMetric(race.total_elevation_gain, 'elevation');\n    document.querySelector('#race-date-control').value = convertTime(race.start_date);\n    document.querySelector('#race-distance-control').value = `${(race.distance / 1000).toFixed(2)} km`;\n    displayMetric(race.location_city, 'location');\n    document.querySelector('#race-time-control').value = totalTime;\n    document.querySelector('#race-location-control').value = race.location_city;\n\n    // Display splits in chosen metric\n    race.laps.forEach(lap => displaySplits(lap))\n}\n\n\n// Display preview on first submit\nfunction setPreview() {\n    document.querySelector('.table-body').innerHTML = '';\n    const inputs = document.querySelectorAll('.card--race-info input');\n    const splits = Array.from(document.querySelectorAll('.card--splits .race-splits'));\n\n    const displayInputsPreview = (input) => {\n        const inputSelector = input.id.split('-')[1];\n        document.querySelector(`.preview__${inputSelector}`).innerHTML = input.value;\n    }\n\n    const displaySplitsPreview = (split, index) => {\n        const displayIndex = index + 1;\n        let html = `\n            <th scope=\"row\">${displayIndex}</th>\n            <td>${split.value}</td>\n        `\n        document.querySelector('.table--splits').insertAdjacentHTML('beforeend', html);\n    }\n\n    splits.forEach((split, index) => { \n        displaySplitsPreview(split,index)\n    })\n\n    inputs.forEach(input => displayInputsPreview(input));\n\n}\n\nfunction setSplitsPreview() {\n    document.querySelector('.table--splits').innerHTML = '';\n    const splits = Array.from(document.querySelectorAll('.card--splits .race-splits'));\n\n    const displaySplitsPreview = (split, index) => {\n        const displayIndex = index + 1;\n        let html = `\n            <th scope=\"row\">${displayIndex}</th>\n            <td>${split.value}</td>\n        `\n        document.querySelector('.table--splits').insertAdjacentHTML('beforeend', html);\n    }\n\n    splits.forEach((split, index) => { \n        displaySplitsPreview(split,index)\n    })\n}\n\n\nfunction setGoalsPreview(e) {\n    if(e.target.classList.contains('goal-delete')) {\n        e.target.parentElement.remove();\n    }\n    const alphabet = ['a','b','c','d','e'];\n    const goalValues = Array.from(document.querySelectorAll('.goal'));\n\n    const convertDigitToNum = (num) => {\n        return alphabet[num];\n    }\n    const completedOrNot = (bool) => {\n        return bool ? 'Yes' : 'No'\n    }\n\n    const goalValuesArr = goalValues.map((el, index) => {\n        return `\n            <tr class=\"preview__goal\">\n                <td>${convertDigitToNum(index)}</td>\n                <td>${el.children[1].value}</td>\n                <td>${completedOrNot(el.children[0].children[0].checked)}</td>\n            </tr>\n        `\n    });\n    document.querySelector('.table--goals').innerHTML = goalValuesArr.join('');\n}\n\n\n// Handle submit\nfunction handleSubmit(event) {\n    event.preventDefault();\n\n    const activityID = (form.elements[0].value);    \n    localStorage.setItem('actID', activityID);\n    const url = `https://www.strava.com/oauth/authorize?client_id=96784&response_type=code&redirect_uri=https://race-report-gen.jezl.xyz/&approval_prompt=force&scope=activity:read_all`;\n    window.location = url;\n}\n\n\n// Update splits \nfunction updateSplits(event) {\n\n    const convertToMin = (s) => {\n\n        // 👇️ get number of full minutes\n        const minutes = Math.floor(s / 60);\n        \n        // 👇️ get remainder of seconds\n        const seconds = s % 60;\n        \n        function padTo2Digits(num) {\n          return num.toString().padStart(2, '0');\n        }\n        \n        // ✅ format as MM:SS\n        const result = `${padTo2Digits(minutes)}:${padTo2Digits(seconds)}`;\n        return result;\n    }\n    \n    const displaySplits = (lap) => {\n\n        document.querySelector('.the-splits').insertAdjacentHTML('beforeEnd',\n            `\n            <div class=\"mb-3\">\n                <label for=\"race-${lap.split}-control\" class=\"form-label\">\n                    Split ${lap.split}\n                </label>\n                <input type=\"text\" class=\"form-control race-splits\" id=\"race-distance-control-${lap.split}\" value=${convertToMin(lap.elapsed_time)}>\n            </div>\n            `\n        )\n    }\n    \n    let newSplits;\n\n    if(event.target.value === 'km') {\n        newSplits = globalRace.splits_metric;\n    } else if (event.target.value = 'miles') {\n        newSplits = globalRace.splits_standard;\n    }\n\n    document.querySelector('.the-splits').innerHTML = '';\n\n    newSplits.forEach(lap => displaySplits(lap))\n    setSplitsPreview();\n}\n\n"],"names":["form","document","querySelector","outputArea","loading","activityInput","results","unitSelector","unitRadios","querySelectorAll","addGoalBtn","goalCard","inputsArea","raceInfoArea","splitsArea","goalsArea","backgroundArea","previewArea","sourceArea","metricOrStandard","activities","globalRace","measurement","clientId","clientSecret","callActivity","addEventListener","handleSubmit","setPreview","setSplitsPreview","setGoalsPreview","handleGoalAdd","config","attributes","childList","subtree","callback","values","name","textContent","date","distance","location","time","elevation","splits","Array","from","goals","map","split","index","value","goal","children","childNodes","data","html","join","observer","MutationObserver","displayData","accessToken","ID","fetch","then","response","json","result","hideLoading","setActivities","insertAdjacentHTML","displayLoading","classList","remove","add","race","laps","length","splits_standard","checked","raceName","totalTime","Date","elapsed_time","toISOString","slice","displaySplits","lap","s","seconds","padTo2Digits","num","toString","padStart","Math","floor","convertToMin","displayMetric","metric","item","undefined","total_elevation_gain","timestamp","month","toLocaleString","weekday","getDate","getUTCFullYear","convertTime","start_date","toFixed","location_city","forEach","innerHTML","inputs","displaySplitsPreview","input","inputSelector","id","displayInputsPreview","e","target","contains","parentElement","alphabet","goalValues","goalValuesArr","el","bool","event","preventDefault","activityID","elements","localStorage","setItem","window","updateSplits","newSplits","splits_metric","observe","queryString","search","code","URLSearchParams","get","runID","getItem","method","access_token","unit"],"version":3,"file":"index.8d159b8e.js.map"}